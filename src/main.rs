const fn get_cos_sin_tables() -> ([i32; 256], [i32; 256]) {
	let sin: [i32; 256] = [
		0, 3, 6, 9, 12, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 51, 54, 57, 60, 63, 65, 68, 71, 73, 76, 78, 81,
		83, 85, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 107, 109, 111, 112, 113, 115, 116, 117, 118, 120, 121, 122,
		122, 123, 124, 125, 125, 126, 126, 126, 127, 127, 127, 127, 127, 127, 127, 126, 126, 126, 125, 125, 124, 123,
		122, 122, 121, 120, 118, 117, 116, 115, 113, 112, 111, 109, 107, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88,
		85, 83, 81, 78, 76, 73, 71, 68, 65, 63, 60, 57, 54, 51, 49, 46, 43, 40, 37, 34, 31, 28, 25, 22, 19, 16, 12, 9,
		6, 3, 0, -3, -6, -9, -12, -16, -19, -22, -25, -28, -31, -34, -37, -40, -43, -46, -49, -51, -54, -57, -60, -63,
		-65, -68, -71, -73, -76, -78, -81, -83, -85, -88, -90, -92, -94, -96, -98, -100, -102, -104, -106, -107, -109,
		-111, -112, -113, -115, -116, -117, -118, -120, -121, -122, -122, -123, -124, -125, -125, -126, -126, -126,
		-127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -125, -125, -124, -123, -122, -122, -121, -120,
		-118, -117, -116, -115, -113, -112, -111, -109, -107, -106, -104, -102, -100, -98, -96, -94, -92, -90, -88,
		-85, -83, -81, -78, -76, -73, -71, -68, -65, -63, -60, -57, -54, -51, -49, -46, -43, -40, -37, -34, -31, -28,
		-25, -22, -19, -16, -12, -9, -6, -3,
	];

	let mut cos = [0; 256];
	let mut i=0;
	while i<256{
		cos[i] = sin[(i + 65) & 255];
		i+=1;
	}

	(cos, sin)
}

fn trig_tables()->([i32; 256], [i32; 256]){
	let mut tables=([0i32; 256], [0i32; 256]);
	let mut i=0;
	while i<256{
		let theta=i as f32*core::f32::consts::TAU/256.0;
		let (sin,cos)=theta.sin_cos();
		tables.0[i]=((cos*126.86).round() as i32).clamp(-127,127);
		tables.1[i]=((sin*126.86).round() as i32).clamp(-127,127);
		i+=1;
	}
	tables
}

fn main(){
	let const_t=get_cos_sin_tables();
	let calc_t=trig_tables();
	assert_eq!(const_t.1,calc_t.1);
}
